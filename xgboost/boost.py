# -*- coding: utf-8 -*-
"""boost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LjsUH5ulQC_Za2uRQ8iKPRZiI0zrVUi2
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

dados_treino = pd.read_csv('treino.csv', index_col='Id')
dados_teste = pd.read_csv('teste.csv', index_col='Id')

X = dados_treino.copy()
X.dropna(axis=0, subset=['SalePrice'], inplace=True)
y = X.SalePrice
X.drop(['SalePrice'], axis=1, inplace=True)

X_treino, X_valid, y_treino, y_valid = train_test_split(X, y, 
                                                        train_size=0.8, 
                                                        test_size=0.2,
                                                        random_state=42)

colunas_numericas = [coluna for coluna in X_treino.columns if X_treino[coluna].dtype in ['int64', 'float64']]

colunas_baixa_card = [coluna for coluna in X_treino.columns 
                      if X_treino[coluna].nunique() < 10 
                      and X_treino[coluna].dtype == "object"]

colunas_selec = colunas_baixa_card + colunas_numericas

X_treino_selec = X_treino[colunas_selec].copy()
X_valid_selec = X_valid[colunas_selec].copy()
X_teste_selec = dados_teste[colunas_selec].copy()

"""Também dá para fazer one hot encoding com pandas, usando get_dummies."""

X_treino_selec = pd.get_dummies(X_treino_selec)
X_valid_selec = pd.get_dummies(X_valid_selec)
X_teste_selec = pd.get_dummies(X_teste_selec)

X_teste_selec.head(5)

X_treino_selec, X_valid_selec = X_treino_selec.align(X_valid_selec, join='left', axis=1)
X_treino_selec, X_teste_selec = X_treino_selec.align(X_teste_selec, join='left', axis=1)

X_teste_selec.head(5)

from xgboost import XGBRegressor

modelo_1 = XGBRegressor(random_state=0)

modelo_1.fit(X_treino_selec, y_treino)

preds_1 = modelo_1.predict(X_valid_selec)

mae_1 = mean_absolute_error(preds_1, y_valid)
print("MAE modelo 1:" , mae_1)

"""Ajustando parametros do XGBoost e melhorando o modelo."""

modelo_2 = XGBRegressor(n_estimators=1000, learning_rate=0.05)

modelo_2.fit(X_treino_selec, y_treino)

preds_2 = modelo_2.predict(X_valid_selec)

mae_2 = mean_absolute_error(preds_2, y_valid)
print("MAE modelo 2:" , mae_2)